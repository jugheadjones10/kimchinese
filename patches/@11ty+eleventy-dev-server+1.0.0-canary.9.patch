diff --git a/node_modules/@11ty/eleventy-dev-server/server/wrapResponse.js b/node_modules/@11ty/eleventy-dev-server/server/wrapResponse.js
index ba657e4..1494391 100644
--- a/node_modules/@11ty/eleventy-dev-server/server/wrapResponse.js
+++ b/node_modules/@11ty/eleventy-dev-server/server/wrapResponse.js
@@ -1,100 +1,109 @@
 function getContentType(headers) {
-  if(!headers) {
-    return;
+  if (!headers) {
+    return
   }
 
-  for(let key in headers) {
-    if(key.toLowerCase() === "content-type") {
-      return headers[key];
+  for (let key in headers) {
+    if (key.toLowerCase() === "content-type") {
+      return headers[key]
     }
   }
 }
 
 // Inspired by `resp-modifier` https://github.com/shakyShane/resp-modifier/blob/4a000203c9db630bcfc3b6bb8ea2abc090ae0139/index.js
 function wrapResponse(resp, transformHtml) {
-  resp._wrappedOriginalWrite = resp.write;
-  resp._wrappedOriginalWriteHead = resp.writeHead;
-  resp._wrappedOriginalEnd = resp.end;
+  resp._wrappedOriginalWrite = resp.write
+  resp._wrappedOriginalWriteHead = resp.writeHead
+  resp._wrappedOriginalEnd = resp.end
 
-  resp._wrappedHeaders = [];
-  resp._wrappedTransformHtml = transformHtml;
+  resp._wrappedHeaders = []
+  resp._wrappedTransformHtml = transformHtml
 
   // Original signature writeHead(statusCode[, statusMessage][, headers])
-  resp.writeHead = function(statusCode, ...args) {
-    let headers = args[args.length - 1];
+  resp.writeHead = function (statusCode, ...args) {
+    let headers = args[args.length - 1]
     // statusMessage is a string
-    if(typeof headers !== "string") {
-      this._contentType = getContentType(headers);
+    if (typeof headers !== "string") {
+      this._contentType = getContentType(headers)
     }
 
-    if((this._contentType || "").startsWith("text/html")) {
-      this._wrappedHeaders.push([statusCode, ...args]);
+    console.log("Content type!", this._contentType)
+    console.log(
+      "Testing it on my own: ",
+      (this._contentType || "").startsWith("text/html")
+    )
+    if ((this._contentType || "").startsWith("text/html")) {
+      this._wrappedHeaders.push([statusCode, ...args])
     } else {
-      return this._wrappedOriginalWriteHead(statusCode, ...args);
+      return this._wrappedOriginalWriteHead(statusCode, ...args)
     }
-    return this;
+    return this
   }
 
   // data can be a String or Buffer
-  resp.write = function(data, ...args) {
-    if(typeof data === "string") {
-      if(!this._writeCache) {
-        this._writeCache = "";
+  resp.write = function (data, ...args) {
+    if (typeof data === "string") {
+      if (!this._writeCache) {
+        this._writeCache = ""
       }
 
       // TODO encoding and callback args
-      this._writeCache += data;
+      this._writeCache += data
     } else {
       // Buffers
-      return this._wrappedOriginalWrite(data, ...args);
+      return this._wrappedOriginalWrite(data, ...args)
     }
-    return this;
+    return this
   }
 
   // data can be a String or Buffer
-  resp.end = function(data, encoding, callback) {
-    if(typeof this._writeCache === "string" || typeof data === "string") {
+  resp.end = function (data, encoding, callback) {
+    if (typeof this._writeCache === "string" || typeof data === "string") {
       // Strings
-      if(!this._writeCache) {
-        this._writeCache = "";
+      if (!this._writeCache) {
+        this._writeCache = ""
       }
-      if(typeof data === "string") {
-        this._writeCache += data;
+      if (typeof data === "string") {
+        this._writeCache += data
       }
 
-      let result = this._writeCache;
+      let result = this._writeCache
 
       // Only transform HTML
       // Note the “setHeader versus writeHead” note on https://nodejs.org/api/http.html#responsewriteheadstatuscode-statusmessage-headers
-      let contentType = this._contentType || getContentType(this.getHeaders());
-      if(contentType.startsWith("text/html")) {
-        if(this._wrappedTransformHtml && typeof this._wrappedTransformHtml === "function") {
-          result = this._wrappedTransformHtml(result);
-          this.setHeader("Content-Length", Buffer.byteLength(result));
+      let contentType =
+        this._contentType || getContentType(this.getHeaders()) || ""
+      if (contentType.startsWith("text/html")) {
+        if (
+          this._wrappedTransformHtml &&
+          typeof this._wrappedTransformHtml === "function"
+        ) {
+          result = this._wrappedTransformHtml(result)
+          this.setHeader("Content-Length", Buffer.byteLength(result))
         }
       }
 
-      for(let headers of this._wrappedHeaders) {
-        this._wrappedOriginalWriteHead(...headers);
+      for (let headers of this._wrappedHeaders) {
+        this._wrappedOriginalWriteHead(...headers)
       }
 
-      this._writeCache = [];
+      this._writeCache = []
       this._wrappedOriginalWrite(result, encoding)
-      return this._wrappedOriginalEnd(callback);
+      return this._wrappedOriginalEnd(callback)
     } else {
       // Buffers
-      for(let headers of this._wrappedHeaders) {
-        this._wrappedOriginalWriteHead(...headers);
+      for (let headers of this._wrappedHeaders) {
+        this._wrappedOriginalWriteHead(...headers)
       }
 
-      if(data) {
-        this._wrappedOriginalWrite(data, encoding);
+      if (data) {
+        this._wrappedOriginalWrite(data, encoding)
       }
-      return this._wrappedOriginalEnd(callback);
+      return this._wrappedOriginalEnd(callback)
     }
   }
 
-  return resp;
+  return resp
 }
 
-module.exports = wrapResponse;
\ No newline at end of file
+module.exports = wrapResponse
